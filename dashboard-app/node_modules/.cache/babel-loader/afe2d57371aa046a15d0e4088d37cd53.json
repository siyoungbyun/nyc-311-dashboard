{"ast":null,"code":"var _jsxFileName = \"/home/syb234/dashboard/dashboard-backend/dashboard-app/src/components/ChartRenderer.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useCubeQuery } from \"@cubejs-client/react\";\nimport { Spin, Row, Col, Statistic, Table } from \"antd\";\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\nconst COLORS_SERIES = [\"#FF6492\", \"#141446\", \"#7A77FF\"];\nconst TypeToChartComponent = {\n  line: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        borderColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        yAxes: [{\n          ticks: {\n            stepSize: 0.5\n          }\n        }],\n        xAxes: [{\n          ticks: {\n            stepSize: 0.5\n          }\n        }]\n      }\n    };\n    return React.createElement(Line, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  },\n  bar: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        xAxes: [{\n          stacked: true\n        }]\n      }\n    };\n    return React.createElement(Bar, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  },\n  area: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index]\n      }))\n    };\n    const options = {\n      scales: {\n        yAxes: [{\n          stacked: true\n        }]\n      }\n    };\n    return React.createElement(Line, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  },\n  pie: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map(s => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES,\n        hoverBackgroundColor: COLORS_SERIES\n      }))\n    };\n    const options = {};\n    return React.createElement(Pie, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  },\n  number: ({\n    resultSet\n  }) => React.createElement(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, resultSet.seriesNames().map(s => React.createElement(Statistic, {\n    value: resultSet.totalRow()[s.key],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })))),\n  table: ({\n    resultSet\n  }) => React.createElement(Table, {\n    pagination: false,\n    columns: resultSet.tableColumns().map(c => ({ ...c,\n      dataIndex: c.key\n    })),\n    dataSource: resultSet.tablePivot(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })\n};\nconst TypeToMemoChartComponent = Object.keys(TypeToChartComponent).map(key => ({\n  [key]: React.memo(TypeToChartComponent[key])\n})).reduce((a, b) => ({ ...a,\n  ...b\n}));\n\nconst renderChart = Component => ({\n  resultSet,\n  error\n}) => resultSet && React.createElement(Component, {\n  resultSet: resultSet,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 115\n  },\n  __self: this\n}) || error && error.toString() || React.createElement(Spin, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 116\n  },\n  __self: this\n});\n\nconst ChartRenderer = ({\n  vizState\n}) => {\n  const {\n    query,\n    chartType\n  } = vizState;\n  const component = TypeToMemoChartComponent[chartType];\n  const renderProps = useCubeQuery(query);\n  return component && renderChart(component)(renderProps);\n};\n\nChartRenderer.propTypes = {\n  vizState: PropTypes.object,\n  cubejsApi: PropTypes.object\n};\nChartRenderer.defaultProps = {\n  vizState: {},\n  cubejsApi: null\n};\nexport default ChartRenderer;","map":{"version":3,"sources":["/home/syb234/dashboard/dashboard-backend/dashboard-app/src/components/ChartRenderer.js"],"names":["React","PropTypes","useCubeQuery","Spin","Row","Col","Statistic","Table","Line","Bar","Pie","COLORS_SERIES","TypeToChartComponent","line","resultSet","data","labels","categories","map","c","category","datasets","series","s","index","label","title","r","value","borderColor","fill","options","scales","yAxes","ticks","stepSize","xAxes","bar","backgroundColor","stacked","area","pie","hoverBackgroundColor","number","height","seriesNames","totalRow","key","table","tableColumns","dataIndex","tablePivot","TypeToMemoChartComponent","Object","keys","memo","reduce","a","b","renderChart","Component","error","toString","ChartRenderer","vizState","query","chartType","component","renderProps","propTypes","object","cubejsApi","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useCubeQuery } from \"@cubejs-client/react\";\nimport { Spin, Row, Col, Statistic, Table } from \"antd\";\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\nconst COLORS_SERIES = [\"#FF6492\", \"#141446\", \"#7A77FF\"];\nconst TypeToChartComponent = {\n  line: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        borderColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        yAxes: [{\n          ticks: {stepSize: 0.5}\n        }],\n        xAxes: [{\n          ticks: {stepSize: 0.5}\n        }]\n    }\n    };\n    return <Line data={data} options={options} />;\n  },\n  bar: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        xAxes: [\n          {\n            stacked: true\n          }\n        ]\n      }\n    };\n    return <Bar data={data} options={options} />;\n  },\n  area: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index]\n      }))\n    };\n    const options = {\n      scales: {\n        yAxes: [\n          {\n            stacked: true\n          }\n        ]\n      }\n    };\n    return <Line data={data} options={options} />;\n  },\n  pie: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map(s => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES,\n        hoverBackgroundColor: COLORS_SERIES\n      }))\n    };\n    const options = {};\n    return <Pie data={data} options={options} />;\n  },\n  number: ({ resultSet }) => (\n    <Row\n      type=\"flex\"\n      justify=\"center\"\n      align=\"middle\"\n      style={{\n        height: \"100%\"\n      }}\n    >\n      <Col>\n        {resultSet.seriesNames().map(s => (\n          <Statistic value={resultSet.totalRow()[s.key]} />\n        ))}\n      </Col>\n    </Row>\n  ),\n  table: ({ resultSet }) => (\n    <Table\n      pagination={false}\n      columns={resultSet.tableColumns().map(c => ({ ...c, dataIndex: c.key }))}\n      dataSource={resultSet.tablePivot()}\n    />\n  )\n};\nconst TypeToMemoChartComponent = Object.keys(TypeToChartComponent)\n  .map(key => ({\n    [key]: React.memo(TypeToChartComponent[key])\n  }))\n  .reduce((a, b) => ({ ...a, ...b }));\n\nconst renderChart = Component => ({ resultSet, error }) =>\n  (resultSet && <Component resultSet={resultSet} />) ||\n  (error && error.toString()) || <Spin />;\n\nconst ChartRenderer = ({ vizState }) => {\n  const { query, chartType } = vizState;\n  const component = TypeToMemoChartComponent[chartType];\n  const renderProps = useCubeQuery(query);\n  return component && renderChart(component)(renderProps);\n};\n\nChartRenderer.propTypes = {\n  vizState: PropTypes.object,\n  cubejsApi: PropTypes.object\n};\nChartRenderer.defaultProps = {\n  vizState: {},\n  cubejsApi: null\n};\nexport default ChartRenderer;\n"]},"metadata":{},"sourceType":"module"}