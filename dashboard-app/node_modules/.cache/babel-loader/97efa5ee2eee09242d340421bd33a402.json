{"ast":null,"code":"var _jsxFileName = \"/home/syb234/dashboard/dashboard-backend/dashboard-app/src/components/ChartRenderer.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useCubeQuery } from \"@cubejs-client/react\";\nimport { Spin, Row, Col, Statistic, Table } from \"antd\";\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\nconst COLORS_SERIES = [\"#ffa600\", \"#ff7c43\", \"#f95d6a\", \"#d45087\", \"#a05195\", \"#665191\", \"#2f4b7c\", \"#003f5c\"];\nconst TypeToChartComponent = {\n  line: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: 'The number of 311 requests',\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        borderColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        xAxes: [{\n          // ticks: {maxTicksLimit: 10},\n          type: 'time',\n          time: {\n            tooltipFormat: 'll',\n            unit: 'day'\n          }\n        }]\n      }\n    };\n    return React.createElement(Line, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  },\n  bar: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        xAxes: [{\n          stacked: true\n        }]\n      }\n    };\n    return React.createElement(Bar, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  },\n  area: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index]\n      }))\n    };\n    const options = {\n      scales: {\n        yAxes: [{\n          stacked: true\n        }]\n      }\n    };\n    return React.createElement(Line, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  },\n  pie: ({\n    resultSet\n  }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map(s => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES,\n        hoverBackgroundColor: COLORS_SERIES\n      }))\n    };\n    const options = {};\n    return React.createElement(Pie, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    });\n  },\n  number: ({\n    resultSet\n  }) => React.createElement(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, resultSet.seriesNames().map(s => React.createElement(Statistic, {\n    value: resultSet.totalRow()[s.key],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })))),\n  table: ({\n    resultSet\n  }) => React.createElement(Table, {\n    pagination: false,\n    columns: resultSet.tableColumns().map(c => ({ ...c,\n      dataIndex: c.key\n    })),\n    dataSource: resultSet.tablePivot(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })\n};\nconst TypeToMemoChartComponent = Object.keys(TypeToChartComponent).map(key => ({\n  [key]: React.memo(TypeToChartComponent[key])\n})).reduce((a, b) => ({ ...a,\n  ...b\n}));\n\nconst renderChart = Component => ({\n  resultSet,\n  error\n}) => resultSet && React.createElement(Component, {\n  resultSet: resultSet,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117\n  },\n  __self: this\n}) || error && error.toString() || React.createElement(Spin, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118\n  },\n  __self: this\n});\n\nconst ChartRenderer = ({\n  vizState\n}) => {\n  const {\n    query,\n    chartType\n  } = vizState;\n  const component = TypeToMemoChartComponent[chartType];\n  const renderProps = useCubeQuery(query);\n  return component && renderChart(component)(renderProps);\n};\n\nChartRenderer.propTypes = {\n  vizState: PropTypes.object,\n  cubejsApi: PropTypes.object\n};\nChartRenderer.defaultProps = {\n  vizState: {},\n  cubejsApi: null\n};\nexport default ChartRenderer;","map":{"version":3,"sources":["/home/syb234/dashboard/dashboard-backend/dashboard-app/src/components/ChartRenderer.js"],"names":["React","PropTypes","useCubeQuery","Spin","Row","Col","Statistic","Table","Line","Bar","Pie","COLORS_SERIES","TypeToChartComponent","line","resultSet","data","labels","datasets","series","map","s","index","label","title","r","value","borderColor","fill","options","scales","xAxes","type","time","tooltipFormat","unit","bar","categories","c","category","backgroundColor","stacked","area","yAxes","pie","hoverBackgroundColor","number","height","seriesNames","totalRow","key","table","tableColumns","dataIndex","tablePivot","TypeToMemoChartComponent","Object","keys","memo","reduce","a","b","renderChart","Component","error","toString","ChartRenderer","vizState","query","chartType","component","renderProps","propTypes","object","cubejsApi","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useCubeQuery } from \"@cubejs-client/react\";\nimport { Spin, Row, Col, Statistic, Table } from \"antd\";\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\nconst COLORS_SERIES = [\"#ffa600\", \"#ff7c43\", \"#f95d6a\", \"#d45087\", \"#a05195\", \"#665191\", \"#2f4b7c\", \"#003f5c\"];\nconst TypeToChartComponent = {\n  line: ({ resultSet }) => {\n    const data = {\n      labels: 'The number of 311 requests',\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        borderColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        xAxes: [{\n          // ticks: {maxTicksLimit: 10},\n          type: 'time',\n          time: {\n            tooltipFormat: 'll',\n            unit: 'day'\n          }\n        }]\n    }\n    };\n    return <Line data={data} options={options} />;\n  },\n  bar: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index],\n        fill: false\n      }))\n    };\n    const options = {\n      scales: {\n        xAxes: [\n          {\n            stacked: true\n          }\n        ]\n      }\n    };\n    return <Bar data={data} options={options} />;\n  },\n  area: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map((s, index) => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES[index]\n      }))\n    };\n    const options = {\n      scales: {\n        yAxes: [\n          {\n            stacked: true\n          }\n        ]\n      }\n    };\n    return <Line data={data} options={options} />;\n  },\n  pie: ({ resultSet }) => {\n    const data = {\n      labels: resultSet.categories().map(c => c.category),\n      datasets: resultSet.series().map(s => ({\n        label: s.title,\n        data: s.series.map(r => r.value),\n        backgroundColor: COLORS_SERIES,\n        hoverBackgroundColor: COLORS_SERIES\n      }))\n    };\n    const options = {};\n    return <Pie data={data} options={options} />;\n  },\n  number: ({ resultSet }) => (\n    <Row\n      type=\"flex\"\n      justify=\"center\"\n      align=\"middle\"\n      style={{\n        height: \"100%\"\n      }}\n    >\n      <Col>\n        {resultSet.seriesNames().map(s => (\n          <Statistic value={resultSet.totalRow()[s.key]} />\n        ))}\n      </Col>\n    </Row>\n  ),\n  table: ({ resultSet }) => (\n    <Table\n      pagination={false}\n      columns={resultSet.tableColumns().map(c => ({ ...c, dataIndex: c.key }))}\n      dataSource={resultSet.tablePivot()}\n    />\n  )\n};\nconst TypeToMemoChartComponent = Object.keys(TypeToChartComponent)\n  .map(key => ({\n    [key]: React.memo(TypeToChartComponent[key])\n  }))\n  .reduce((a, b) => ({ ...a, ...b }));\n\nconst renderChart = Component => ({ resultSet, error }) =>\n  (resultSet && <Component resultSet={resultSet} />) ||\n  (error && error.toString()) || <Spin />;\n\nconst ChartRenderer = ({ vizState }) => {\n  const { query, chartType } = vizState;\n  const component = TypeToMemoChartComponent[chartType];\n  const renderProps = useCubeQuery(query);\n  return component && renderChart(component)(renderProps);\n};\n\nChartRenderer.propTypes = {\n  vizState: PropTypes.object,\n  cubejsApi: PropTypes.object\n};\nChartRenderer.defaultProps = {\n  vizState: {},\n  cubejsApi: null\n};\nexport default ChartRenderer;\n"]},"metadata":{},"sourceType":"module"}