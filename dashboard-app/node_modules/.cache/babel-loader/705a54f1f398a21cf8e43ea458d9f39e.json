{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport RcTable from 'rc-table';\nimport { INTERNAL_HOOKS } from \"rc-table/es/Table\";\nimport Spin from '../spin';\nimport Pagination from '../pagination';\nimport { ConfigContext } from '../config-provider/context';\nimport usePagination, { DEFAULT_PAGE_SIZE, getPaginationParam } from './hooks/usePagination';\nimport useLazyKVMap from './hooks/useLazyKVMap';\nimport useSelection, { SELECTION_ALL, SELECTION_INVERT } from './hooks/useSelection';\nimport useSorter, { getSortData } from './hooks/useSorter';\nimport useFilter, { getFilterData } from './hooks/useFilter';\nimport useTitleColumns from './hooks/useTitleColumns';\nimport renderExpandIcon from './ExpandIcon';\nimport scrollTo from '../_util/scrollTo';\nimport defaultLocale from '../locale/en_US';\nimport SizeContext from '../config-provider/SizeContext';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nvar EMPTY_LIST = [];\n\nfunction Table(props) {\n  var _classNames3;\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      customizeSize = props.size,\n      bordered = props.bordered,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      dataSource = props.dataSource,\n      pagination = props.pagination,\n      rowSelection = props.rowSelection,\n      rowKey = props.rowKey,\n      rowClassName = props.rowClassName,\n      columns = props.columns,\n      onChange = props.onChange,\n      getPopupContainer = props.getPopupContainer,\n      loading = props.loading,\n      expandIcon = props.expandIcon,\n      expandable = props.expandable,\n      expandedRowRender = props.expandedRowRender,\n      indentSize = props.indentSize,\n      _props$childrenColumn = props.childrenColumnName,\n      childrenColumnName = _props$childrenColumn === void 0 ? 'children' : _props$childrenColumn,\n      scroll = props.scroll,\n      sortDirections = props.sortDirections,\n      locale = props.locale;\n  var size = React.useContext(SizeContext);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      _React$useContext$loc = _React$useContext.locale,\n      contextLocale = _React$useContext$loc === void 0 ? defaultLocale : _React$useContext$loc,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction;\n\n  var mergedSize = customizeSize || size;\n  var tableLocale = locale || contextLocale.Table;\n  var rawData = dataSource || EMPTY_LIST;\n\n  var _React$useContext2 = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext2.getPrefixCls;\n\n  var prefixCls = getPrefixCls('table', customizePrefixCls);\n  var expandType = React.useMemo(function () {\n    if (rawData.some(function (item) {\n      return item[childrenColumnName];\n    })) {\n      return 'nest';\n    }\n\n    if (expandedRowRender || expandable && expandable.expandedRowRender) {\n      return 'row';\n    }\n\n    return null;\n  }, [rawData]);\n  var internalRefs = {\n    body: React.useRef()\n  }; // ============================ RowKey ============================\n\n  var getRowKey = React.useMemo(function () {\n    if (typeof rowKey === 'function') {\n      return rowKey;\n    }\n\n    return function (record) {\n      return record[rowKey];\n    };\n  }, [rowKey]);\n\n  var _useLazyKVMap = useLazyKVMap(rawData, childrenColumnName, getRowKey),\n      _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1),\n      getRecordByKey = _useLazyKVMap2[0]; // ============================ Events =============================\n\n\n  var changeEventInfo = {};\n\n  var triggerOnChange = function triggerOnChange(info) {\n    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var changeInfo = _extends(_extends({}, changeEventInfo), info);\n\n    if (reset) {\n      changeEventInfo.resetPagination(); // Reset event param\n\n      if (changeInfo.pagination.current) {\n        changeInfo.pagination.current = 1;\n      } // Trigger pagination events\n\n\n      if (pagination && pagination.onChange) {\n        pagination.onChange(1, changeInfo.pagination.pageSize);\n      }\n    }\n\n    if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {\n      scrollTo(0, {\n        getContainer: function getContainer() {\n          return internalRefs.body.current;\n        }\n      });\n    }\n\n    if (onChange) {\n      onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {\n        currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates)\n      });\n    }\n  };\n  /**\n   * Controlled state in `columns` is not a good idea that makes too many code (1000+ line?)\n   * to read state out and then put it back to title render.\n   * Move these code into `hooks` but still too complex.\n   * We should provides Table props like `sorter` & `filter` to handle control in next big version.\n   */\n  // ============================ Sorter =============================\n\n\n  var onSorterChange = function onSorterChange(sorter, sorterStates) {\n    triggerOnChange({\n      sorter: sorter,\n      sorterStates: sorterStates\n    }, false);\n  };\n\n  var _useSorter = useSorter({\n    prefixCls: prefixCls,\n    columns: columns || [],\n    onSorterChange: onSorterChange,\n    sortDirections: sortDirections || ['ascend', 'descend']\n  }),\n      _useSorter2 = _slicedToArray(_useSorter, 4),\n      transformSorterColumns = _useSorter2[0],\n      sortStates = _useSorter2[1],\n      sorterTitleProps = _useSorter2[2],\n      getSorters = _useSorter2[3];\n\n  var sortedData = React.useMemo(function () {\n    return getSortData(rawData, sortStates, childrenColumnName);\n  }, [rawData, sortStates]);\n  changeEventInfo.sorter = getSorters();\n  changeEventInfo.sorterStates = sortStates; // ============================ Filter ============================\n\n  var onFilterChange = function onFilterChange(filters, filterStates) {\n    triggerOnChange({\n      filters: filters,\n      filterStates: filterStates\n    }, true);\n  };\n\n  var _useFilter = useFilter({\n    prefixCls: prefixCls,\n    dropdownPrefixCls: dropdownPrefixCls,\n    columns: columns || [],\n    onFilterChange: onFilterChange,\n    getPopupContainer: getPopupContainer\n  }),\n      _useFilter2 = _slicedToArray(_useFilter, 3),\n      transformFilterColumns = _useFilter2[0],\n      filterStates = _useFilter2[1],\n      getFilters = _useFilter2[2];\n\n  var mergedData = getFilterData(sortedData, filterStates);\n  changeEventInfo.filters = getFilters();\n  changeEventInfo.filterStates = filterStates; // ============================ Column ============================\n\n  var columnTitleProps = React.useMemo(function () {\n    return _extends({}, sorterTitleProps);\n  }, [sorterTitleProps]);\n\n  var _useTitleColumns = useTitleColumns(columnTitleProps),\n      _useTitleColumns2 = _slicedToArray(_useTitleColumns, 1),\n      transformTitleColumns = _useTitleColumns2[0]; // ========================== Pagination ==========================\n\n\n  var onPaginationChange = function onPaginationChange(current, pageSize) {\n    triggerOnChange({\n      pagination: _extends(_extends({}, changeEventInfo.pagination), {\n        current: current,\n        pageSize: pageSize\n      })\n    });\n  };\n\n  var _usePagination = usePagination(mergedData.length, pagination, onPaginationChange),\n      _usePagination2 = _slicedToArray(_usePagination, 2),\n      mergedPagination = _usePagination2[0],\n      resetPagination = _usePagination2[1];\n\n  changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(pagination, mergedPagination);\n  changeEventInfo.resetPagination = resetPagination; // ============================= Data =============================\n\n  var pageData = React.useMemo(function () {\n    if (pagination === false || !mergedPagination.pageSize || mergedData.length < mergedPagination.total) {\n      return mergedData;\n    }\n\n    var _mergedPagination$cur = mergedPagination.current,\n        current = _mergedPagination$cur === void 0 ? 1 : _mergedPagination$cur,\n        _mergedPagination$pag = mergedPagination.pageSize,\n        pageSize = _mergedPagination$pag === void 0 ? DEFAULT_PAGE_SIZE : _mergedPagination$pag;\n    var currentPageData = mergedData.slice((current - 1) * pageSize, current * pageSize);\n    return currentPageData;\n  }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]); // ========================== Selections ==========================\n\n  var _useSelection = useSelection(rowSelection, {\n    prefixCls: prefixCls,\n    data: mergedData,\n    pageData: pageData,\n    getRowKey: getRowKey,\n    getRecordByKey: getRecordByKey,\n    expandType: expandType,\n    childrenColumnName: childrenColumnName\n  }),\n      _useSelection2 = _slicedToArray(_useSelection, 2),\n      transformSelectionColumns = _useSelection2[0],\n      selectedKeySet = _useSelection2[1];\n\n  var internalRowClassName = function internalRowClassName(record, index, indent) {\n    var mergedRowClassName;\n\n    if (typeof rowClassName === 'function') {\n      mergedRowClassName = classNames(rowClassName(record, index, indent));\n    } else {\n      mergedRowClassName = classNames(rowClassName);\n    }\n\n    return classNames(_defineProperty({}, \"\".concat(prefixCls, \"-row-selected\"), selectedKeySet.has(getRowKey(record, index))), mergedRowClassName);\n  }; // ========================== Expandable ==========================\n\n\n  var mergedExpandable = _extends({}, expandable); // Pass origin render status into `rc-table`, this can be removed when refactor with `rc-table`\n\n\n  mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon; // Customize expandable icon\n\n  mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || renderExpandIcon(tableLocale); // Adjust expand icon index, no overwrite expandIconColumnIndex if set.\n\n  if (expandType === 'nest' && !('expandIconColumnIndex' in mergedExpandable)) {\n    mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;\n  } // Indent size\n\n\n  mergedExpandable.indentSize = mergedExpandable.indentSize || indentSize || 15; // ============================ Render ============================\n\n  var transformColumns = React.useCallback(function (innerColumns) {\n    return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));\n  }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);\n  var topPaginationNode;\n  var bottomPaginationNode;\n\n  if (pagination !== false) {\n    var paginationSize;\n\n    if (mergedPagination.size) {\n      paginationSize = mergedPagination.size;\n    } else {\n      paginationSize = mergedSize === 'small' || mergedSize === 'middle' ? 'small' : undefined;\n    }\n\n    var renderPagination = function renderPagination() {\n      return React.createElement(Pagination, _extends({\n        className: \"\".concat(prefixCls, \"-pagination\")\n      }, mergedPagination, {\n        size: paginationSize\n      }));\n    };\n\n    switch (mergedPagination.position) {\n      case 'top':\n        topPaginationNode = renderPagination();\n        break;\n\n      case 'both':\n        topPaginationNode = renderPagination();\n        bottomPaginationNode = renderPagination();\n        break;\n\n      default:\n        bottomPaginationNode = renderPagination();\n    }\n  } // >>>>>>>>> Spinning\n\n\n  var spinProps;\n\n  if (typeof loading === 'boolean') {\n    spinProps = {\n      spinning: loading\n    };\n  } else {\n    spinProps = loading;\n  }\n\n  var wrapperClassNames = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, \"\".concat(prefixCls, \"-wrapper-rtl\"), direction === 'rtl'));\n  return React.createElement(\"div\", {\n    className: wrapperClassNames,\n    onTouchMove: function onTouchMove(e) {\n      e.preventDefault();\n    }\n  }, React.createElement(Spin, _extends({\n    spinning: false\n  }, spinProps), topPaginationNode, React.createElement(RcTable, _extends({}, props, {\n    expandable: mergedExpandable,\n    prefixCls: prefixCls,\n    className: classNames(className, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-middle\"), mergedSize === 'middle'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-small\"), mergedSize === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-bordered\"), bordered), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames3)),\n    data: pageData,\n    rowKey: getRowKey,\n    rowClassName: internalRowClassName,\n    emptyText: locale && locale.emptyText || renderEmpty('Table') // Internal\n    ,\n    internalHooks: INTERNAL_HOOKS,\n    internalRefs: internalRefs,\n    transformColumns: transformColumns\n  })), bottomPaginationNode));\n}\n\nTable.defaultProps = {\n  rowKey: 'key'\n};\nTable.SELECTION_ALL = SELECTION_ALL;\nTable.SELECTION_INVERT = SELECTION_INVERT;\nTable.Column = Column;\nTable.ColumnGroup = ColumnGroup;\nexport default Table;","map":{"version":3,"sources":["table/Table.jsx"],"names":["EMPTY_LIST","customizePrefixCls","className","customizeSize","bordered","dropdownPrefixCls","dataSource","pagination","rowSelection","rowKey","rowClassName","columns","onChange","getPopupContainer","loading","expandIcon","expandable","expandedRowRender","indentSize","childrenColumnName","scroll","sortDirections","locale","props","size","React","contextLocale","renderEmpty","direction","mergedSize","tableLocale","rawData","getPrefixCls","prefixCls","expandType","item","internalRefs","body","getRowKey","record","getRecordByKey","useLazyKVMap","changeEventInfo","triggerOnChange","reset","changeInfo","scrollTo","getContainer","currentDataSource","getFilterData","getSortData","onSorterChange","sorter","sorterStates","transformSorterColumns","sortStates","sorterTitleProps","getSorters","useSorter","sortedData","onFilterChange","filters","filterStates","transformFilterColumns","getFilters","useFilter","mergedData","columnTitleProps","transformTitleColumns","useTitleColumns","onPaginationChange","current","pageSize","mergedPagination","resetPagination","usePagination","getPaginationParam","pageData","currentPageData","transformSelectionColumns","selectedKeySet","useSelection","data","internalRowClassName","mergedRowClassName","classNames","mergedExpandable","renderExpandIcon","transformColumns","paginationSize","renderPagination","topPaginationNode","bottomPaginationNode","spinProps","spinning","wrapperClassNames","e","Table"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport RcTable from 'rc-table';\nimport { INTERNAL_HOOKS } from 'rc-table/lib/Table';\nimport Spin from '../spin';\nimport Pagination from '../pagination';\nimport { ConfigContext } from '../config-provider/context';\nimport usePagination, { DEFAULT_PAGE_SIZE, getPaginationParam } from './hooks/usePagination';\nimport useLazyKVMap from './hooks/useLazyKVMap';\nimport useSelection, { SELECTION_ALL, SELECTION_INVERT } from './hooks/useSelection';\nimport useSorter, { getSortData } from './hooks/useSorter';\nimport useFilter, { getFilterData } from './hooks/useFilter';\nimport useTitleColumns from './hooks/useTitleColumns';\nimport renderExpandIcon from './ExpandIcon';\nimport scrollTo from '../_util/scrollTo';\nimport defaultLocale from '../locale/en_US';\nimport SizeContext from '../config-provider/SizeContext';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nconst EMPTY_LIST = [];\nfunction Table(props) {\n    const { prefixCls: customizePrefixCls, className, size: customizeSize, bordered, dropdownPrefixCls, dataSource, pagination, rowSelection, rowKey, rowClassName, columns, onChange, getPopupContainer, loading, expandIcon, expandable, expandedRowRender, indentSize, childrenColumnName = 'children', scroll, sortDirections, locale, } = props;\n    const size = React.useContext(SizeContext);\n    const { locale: contextLocale = defaultLocale, renderEmpty, direction } = React.useContext(ConfigContext);\n    const mergedSize = customizeSize || size;\n    const tableLocale = locale || contextLocale.Table;\n    const rawData = dataSource || EMPTY_LIST;\n    const { getPrefixCls } = React.useContext(ConfigContext);\n    const prefixCls = getPrefixCls('table', customizePrefixCls);\n    const expandType = React.useMemo(() => {\n        if (rawData.some(item => item[childrenColumnName])) {\n            return 'nest';\n        }\n        if (expandedRowRender || (expandable && expandable.expandedRowRender)) {\n            return 'row';\n        }\n        return null;\n    }, [rawData]);\n    const internalRefs = {\n        body: React.useRef(),\n    };\n    // ============================ RowKey ============================\n    const getRowKey = React.useMemo(() => {\n        if (typeof rowKey === 'function') {\n            return rowKey;\n        }\n        return (record) => record[rowKey];\n    }, [rowKey]);\n    const [getRecordByKey] = useLazyKVMap(rawData, childrenColumnName, getRowKey);\n    // ============================ Events =============================\n    const changeEventInfo = {};\n    const triggerOnChange = (info, reset = false) => {\n        const changeInfo = Object.assign(Object.assign({}, changeEventInfo), info);\n        if (reset) {\n            changeEventInfo.resetPagination();\n            // Reset event param\n            if (changeInfo.pagination.current) {\n                changeInfo.pagination.current = 1;\n            }\n            // Trigger pagination events\n            if (pagination && pagination.onChange) {\n                pagination.onChange(1, changeInfo.pagination.pageSize);\n            }\n        }\n        if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {\n            scrollTo(0, {\n                getContainer: () => internalRefs.body.current,\n            });\n        }\n        if (onChange) {\n            onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {\n                currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates),\n            });\n        }\n    };\n    /**\n     * Controlled state in `columns` is not a good idea that makes too many code (1000+ line?)\n     * to read state out and then put it back to title render.\n     * Move these code into `hooks` but still too complex.\n     * We should provides Table props like `sorter` & `filter` to handle control in next big version.\n     */\n    // ============================ Sorter =============================\n    const onSorterChange = (sorter, sorterStates) => {\n        triggerOnChange({\n            sorter,\n            sorterStates,\n        }, false);\n    };\n    const [transformSorterColumns, sortStates, sorterTitleProps, getSorters] = useSorter({\n        prefixCls,\n        columns: columns || [],\n        onSorterChange,\n        sortDirections: sortDirections || ['ascend', 'descend'],\n    });\n    const sortedData = React.useMemo(() => getSortData(rawData, sortStates, childrenColumnName), [\n        rawData,\n        sortStates,\n    ]);\n    changeEventInfo.sorter = getSorters();\n    changeEventInfo.sorterStates = sortStates;\n    // ============================ Filter ============================\n    const onFilterChange = (filters, filterStates) => {\n        triggerOnChange({\n            filters,\n            filterStates,\n        }, true);\n    };\n    const [transformFilterColumns, filterStates, getFilters] = useFilter({\n        prefixCls,\n        dropdownPrefixCls,\n        columns: columns || [],\n        onFilterChange,\n        getPopupContainer,\n    });\n    const mergedData = getFilterData(sortedData, filterStates);\n    changeEventInfo.filters = getFilters();\n    changeEventInfo.filterStates = filterStates;\n    // ============================ Column ============================\n    const columnTitleProps = React.useMemo(() => (Object.assign({}, sorterTitleProps)), [sorterTitleProps]);\n    const [transformTitleColumns] = useTitleColumns(columnTitleProps);\n    // ========================== Pagination ==========================\n    const onPaginationChange = (current, pageSize) => {\n        triggerOnChange({\n            pagination: Object.assign(Object.assign({}, changeEventInfo.pagination), { current, pageSize }),\n        });\n    };\n    const [mergedPagination, resetPagination] = usePagination(mergedData.length, pagination, onPaginationChange);\n    changeEventInfo.pagination =\n        pagination === false ? {} : getPaginationParam(pagination, mergedPagination);\n    changeEventInfo.resetPagination = resetPagination;\n    // ============================= Data =============================\n    const pageData = React.useMemo(() => {\n        if (pagination === false ||\n            !mergedPagination.pageSize ||\n            mergedData.length < mergedPagination.total) {\n            return mergedData;\n        }\n        const { current = 1, pageSize = DEFAULT_PAGE_SIZE } = mergedPagination;\n        const currentPageData = mergedData.slice((current - 1) * pageSize, current * pageSize);\n        return currentPageData;\n    }, [\n        !!pagination,\n        mergedData,\n        mergedPagination && mergedPagination.current,\n        mergedPagination && mergedPagination.pageSize,\n        mergedPagination && mergedPagination.total,\n    ]);\n    // ========================== Selections ==========================\n    const [transformSelectionColumns, selectedKeySet] = useSelection(rowSelection, {\n        prefixCls,\n        data: mergedData,\n        pageData,\n        getRowKey,\n        getRecordByKey,\n        expandType,\n        childrenColumnName,\n    });\n    const internalRowClassName = (record, index, indent) => {\n        let mergedRowClassName;\n        if (typeof rowClassName === 'function') {\n            mergedRowClassName = classNames(rowClassName(record, index, indent));\n        }\n        else {\n            mergedRowClassName = classNames(rowClassName);\n        }\n        return classNames({\n            [`${prefixCls}-row-selected`]: selectedKeySet.has(getRowKey(record, index)),\n        }, mergedRowClassName);\n    };\n    // ========================== Expandable ==========================\n    const mergedExpandable = Object.assign({}, expandable);\n    // Pass origin render status into `rc-table`, this can be removed when refactor with `rc-table`\n    mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon;\n    // Customize expandable icon\n    mergedExpandable.expandIcon =\n        mergedExpandable.expandIcon || expandIcon || renderExpandIcon(tableLocale);\n    // Adjust expand icon index, no overwrite expandIconColumnIndex if set.\n    if (expandType === 'nest' && !('expandIconColumnIndex' in mergedExpandable)) {\n        mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;\n    }\n    // Indent size\n    mergedExpandable.indentSize = mergedExpandable.indentSize || indentSize || 15;\n    // ============================ Render ============================\n    const transformColumns = React.useCallback((innerColumns) => {\n        return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));\n    }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);\n    let topPaginationNode;\n    let bottomPaginationNode;\n    if (pagination !== false) {\n        let paginationSize;\n        if (mergedPagination.size) {\n            paginationSize = mergedPagination.size;\n        }\n        else {\n            paginationSize = mergedSize === 'small' || mergedSize === 'middle' ? 'small' : undefined;\n        }\n        const renderPagination = () => (<Pagination className={`${prefixCls}-pagination`} {...mergedPagination} size={paginationSize}/>);\n        switch (mergedPagination.position) {\n            case 'top':\n                topPaginationNode = renderPagination();\n                break;\n            case 'both':\n                topPaginationNode = renderPagination();\n                bottomPaginationNode = renderPagination();\n                break;\n            default:\n                bottomPaginationNode = renderPagination();\n        }\n    }\n    // >>>>>>>>> Spinning\n    let spinProps;\n    if (typeof loading === 'boolean') {\n        spinProps = {\n            spinning: loading,\n        };\n    }\n    else {\n        spinProps = loading;\n    }\n    const wrapperClassNames = classNames(`${prefixCls}-wrapper`, {\n        [`${prefixCls}-wrapper-rtl`]: direction === 'rtl',\n    });\n    return (<div className={wrapperClassNames} onTouchMove={e => {\n        e.preventDefault();\n    }}>\n      <Spin spinning={false} {...spinProps}>\n        {topPaginationNode}\n        <RcTable {...props} expandable={mergedExpandable} prefixCls={prefixCls} className={classNames(className, {\n        [`${prefixCls}-middle`]: mergedSize === 'middle',\n        [`${prefixCls}-small`]: mergedSize === 'small',\n        [`${prefixCls}-bordered`]: bordered,\n        [`${prefixCls}-rtl`]: direction === 'rtl',\n    })} data={pageData} rowKey={getRowKey} rowClassName={internalRowClassName} emptyText={(locale && locale.emptyText) || renderEmpty('Table')} \n    // Internal\n    internalHooks={INTERNAL_HOOKS} internalRefs={internalRefs} transformColumns={transformColumns}/>\n        {bottomPaginationNode}\n      </Spin>\n    </div>);\n}\nTable.defaultProps = {\n    rowKey: 'key',\n};\nTable.SELECTION_ALL = SELECTION_ALL;\nTable.SELECTION_INVERT = SELECTION_INVERT;\nTable.Column = Column;\nTable.ColumnGroup = ColumnGroup;\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}